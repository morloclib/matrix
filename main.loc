module matrix (*)

import types (Real, Int, List, Tuple2)

source Cpp from "eigen/core.hpp"
  ( "mlc_selfcmp" as selfcmp
  , "mlc_transpose" as transpose
  , "mlc_identity" as identity
  , "mlc_col" as col
  , "mlc_row" as row
  , "mlc_block" as block
  , "mlc_cell" as cell
  , "mlc_shape" as shape
  , "mlc_ncol" as ncol
  , "mlc_nrow" as nrow
  , "mlc_mmul" as mmul
  , "mlc_madd" as madd
  , "mlc_smul" as smul
  , "mlc_sadd" as sadd
  , "mlc_col2list" as col2list
  , "mlc_row2list" as row2list
  )

type Cpp => (Matrix a) = "Eigen::Matrix<$1,Eigen::Dynamic,Eigen::Dynamic>" a
type Cpp => (Col a) = "Eigen::Matrix<$1,Eigen::Dynamic,1>" a
type Cpp => (Row a) = "Eigen::Matrix<$1,1,Eigen::Dynamic>" a

-- create a square matrix where mat[i,j] = f(xs[i], xs[j])
selfcmp a b :: f:(a -> a -> b) -> xs:([a]) -> Matrix b

-- Create a m-by-n matrix where mat[i,j] = k
fill a :: k:a -> m:Int -> n:Int -> Matrix a

-- Create an identity matrix of the given size
identity :: Int -> Matrix Real


transpose a :: Matrix a -> Matrix a

col a :: Int -> Matrix a -> Col a

row a :: Int -> Matrix a -> Row a

block :: row:Int
      -> col:Int
      -> nrows:Int
      -> ncols:Int
      -> Matrix a
      -> Matrix a

cell a :: Int -> Int -> Matrix a -> a

shape a :: Matrix a -> (Int, Int)

ncol a :: Matrix a -> Int

nrow a :: Matrix a -> Int

mmul a :: Matrix a -> Matrix a -> Matrix a

madd a :: Matrix a -> Matrix a -> Matrix a

smul a :: a -> Matrix a -> Matrix a

sadd a :: a -> Matrix a -> Matrix a

col2list a :: Col a -> [a]

row2list a :: Row a -> [a]


------------------------------------------------------------------------
-- Serialization functions

instance Packable [[a]] (Matrix a) where
  source Cpp from "eigen/core.hpp"
    ( "mlc_packMatrix" as pack
    , "mlc_unpackMatrix" as unpack
    )

instance Packable [a] (Col a) where
  source Cpp from "eigen/core.hpp"
    ( "mlc_packMatrix" as pack
    , "mlc_unpackMatrix" as unpack
    )

instance Packable [a] (Row a) where
  source Cpp from "eigen/core.hpp"
    ( "mlc_packMatrix" as pack
    , "mlc_unpackMatrix" as unpack
    )
